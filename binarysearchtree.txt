Binary search tree: insertion,deletion,inorder,search

#include<stdio.h>
#include<stdlib.h>
struct node{
    int key;
    struct node *left,*right;
};
struct node* newNode(int item){
    struct node*temp=(struct node*)malloc(sizeof(struct node));
    temp->key=item;
    temp->left=temp->right=NULL;
    return temp;
}
void inorder(struct node* root){
    if(root!=NULL){
        inorder(root->left);
        printf("%d\t",root->key);
        inorder(root->right);
    }
}
struct node *search(struct node *root,int data){
    int a=root->key;
    if(root==NULL)
    return NULL;
    if(data==a)
    return root;
    else if(data<a)
    return search(root->left,a);
    else if(data>a)
    return search(root->right,a);
}
struct node *insert(struct node* node,int key){
    if(node==NULL)
    return newNode(key);
    if(key<node->key)
    node->left=insert(node->left,key);
    else if(key>node->key)
    node->right=insert(node->right,key);
    return node;
}
struct node* minvalueNode(struct node* node){
    struct node *current=node;
    while(current && current->left !=NULL)
    current=current->left;
    return current;
}
struct node* deleteNode(struct node* root, int key){
    if(root==NULL)
    return root;
    if(key<root->key)
    root->left=deleteNode(root->left,key);
    else if(key>root->key)
    root->right=deleteNode(root->right,key);
    else{
        struct node* temp;
        if(root->left==NULL){
        temp=root->right;
        free(root);
        return temp;}
        else if(root->right==NULL){
            temp=root->left;
            free(root);
            return temp;
        }
        temp=minvalueNode(root->right);
        root->key=temp->key;
        root->right=deleteNode(root->right,temp->key);
    }
    return root;
}
void main(){
    struct node *root=NULL;
    root=insert(root,50);
    insert(root,30);
    insert(root,60);
    insert(root,20);
    insert(root,80);
    inorder(root);
    printf("\n\n");
    insert(root,70);
    insert(root,50);
    inorder(root);
    printf("\n\n");
    deleteNode(root,50);
    inorder(root);
    root=search(root,60);
    if(root==NULL)
    printf("\n\nData not present\n");
    else
    printf("\n\nData present\n");
}

